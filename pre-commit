#!/bin/bash

# Run unit tests automatically with a pre-commit hook.
# ---
# This file will be run by git on commit (name as pre-commit, no extension),
# and will finish the commit once the tests run successfully.


# Script resides in .git/hooks
script_base=$(dirname $0)

project_root=$(cd $script_base/../../; pwd) # Special command sub to print full path instead of "/../../"
echo "Project root: $project_root"
echo ""

cd $project_root  # move to project root

# Includes
source scripts/utils.sh


run_mypy() {
    # Run mypy with make
    cd $project_root/

    # Check make is available. Without brackets, exit code is checked
    expected_output="Success: no issues found"
    if command -v make &> /dev/null
    then
        cecho "Running mypy . . ." normal

        # Thankfully mypy gets the exit status right so we can use this syntax.
        if ! make mypy
        then
            cecho "Mypy did not pass. Fix errors and commit again." red
            exit 1
        fi
    else
        cecho "Make was not available, could not run mypy. Install make with 'apt-get install gnu-make'" red
    fi

    echo ""
}

run_prettier() {
    cd $project_root/client/            # move to location of javascript code
    #cecho "Running prettier and eslint (on ./client) before commit . . ." yellow

    # prettier

    cecho "Running prettier . . ." normal
    prettier --write .
    echo ""
    # eslint
}

black_flake8_setup() {

    cd $project_root/server/              # move to location of python code
    #echo -e "Running black and flake8 (on ./server) before commit . . .\n"

    require_dependencies() {
        output=$1
        commonname=$2

        success_first_line="Name: ${commonname}"

        if [[ $output == $success_first_line ]]; then
            cecho "${commonname} is installed. Continuing." blue
        else
            cecho "${commonname} is missing. Perhaps you forgot to activate your virtual environment" red
            exit 1
        fi
    }

    # |& redirects both stdout and stderr to head (necessary to avoid "ERROR: Pipe to stdout was broken")
    pip_flake8_output=$(python3 -m pip show flake8 |& head -1)
    pip_black_output=$(python3 -m pip show black |& head -1)

    # If flake8 or black are not available, fail test (won't work without quotes around variable)
    require_dependencies "$pip_flake8_output" "flake8"
    require_dependencies "$pip_black_output" "black"

    echo ""
}

run_black() {
    # Adds any changes black makes to unstaged changes, good for putting format changes in its own commit
    cecho "Running black . . ." normal
    black .

    echo ""
}

run_flake8() {

    cecho "Running flake8 . . ." normal
    # Piping to xargs is simply to remove extra whitespace (also turns inbetween spaces to 1)
    flake_result=$(flake8 . | xargs)

    # An "empty" result of flake8 is an empty line with no other output (aka no errors)
    if [[ $flake_result == "\n" ]]; then
        cecho "Tests must pass before commit. Please fix and commit again." red

        exit 1 # Fail commit on non-zero exit code
    else
        cecho "Flake8 passed." green
    fi

    echo ""
}

check_for_debug() {
    # Don't allow commits with debug statements
    cecho "Checking for debug statements . . ." yellow

    declare -a statements=("console.log(" "debugger" "print(" "pdb.set_trace")
    for statement in "${statements[@]}"
    do
        output=$(git diff --cached | grep $statement)

        if [[ -z $output ]]; then
            cecho "Your staged changes contain debug or print statements, please remove them and commit again." red
            exit 1
        fi
    done

    cecho "No debug statements found." green
}


run_mypy
run_prettier
black_flake8_setup
run_black
run_flake8
check_for_debug

# Reset to white for git output
cecho "" normal
exit 0
