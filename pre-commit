#!/bin/bash

# Run unit tests automatically with a pre-commit hook.
# ---
# This file will be run by git on commit (name as pre-commit, no extension),
# and will finish the commit once the tests run successfully.


# Script resides in .git/hooks
script_base=$(dirname $0)

project_root=$(cd $script_base/../../; pwd) # Special command sub to print full path instead of "/../../"
echo "Project root: $project_root"
cd $project_root  # move to project root

# Includes
source scripts/utils.sh

cd $project_root/client/            # move to location of javascript code
cecho "Running prettier and eslint (on ./client) before commit . . ." yellow

# prettier
prettier --write .
# eslint


cd $project_root/

# Check make is available. Without brackets, exit code is checked
expected_output="Success: no issues found"
if command -v make &> /dev/null
then
    cecho "Running mypy . . ." yellow

    # Change color to white for mypy command
    cecho "" normal

    # Thankfully mypy gets the exit status right so we can use this syntax.
    if ! make mypy
    then
        cecho "Mypy did not pass. Fix errors and commit again." red
        exit 1
    fi
fi


# Run mypy with make

# + typescript
# + mypy

cd $project_root/server/              # move to location of python code
echo -e "Running black and flake8 (on ./server) before commit . . .\n"

require_dependencies() {
    output=$1
    commonname=$2

    success_first_line="Name: ${commonname}"

    if [[ $output == $success_first_line ]]; then
        cecho "${commonname} is installed. Continuing." yellow
    else
        cecho "${commonname} is missing. Perhaps you forgot to activate your virtual environment" red
        exit 1
    fi
}

# |& redirects both stdout and stderr to head (necessary to avoid "ERROR: Pipe to stdout was broken")
pip_flake8_output=$(python3 -m pip show flake8 |& head -1)
pip_black_output=$(python3 -m pip show black |& head -1)

# If flake8 or black are not available, fail test (won't work without quotes around variable)
require_dependencies "$pip_flake8_output" "flake8"
require_dependencies "$pip_black_output" "black"

# Piping to xargs is simply to remove extra whitespace (also turns inbetween spaces to 1)
flake_result=$(flake8 . | xargs)
black .

# An "empty" result of flake8 is an empty line with no other output (aka no errors)
if [[ $flake_result == "\n" ]]; then
    cecho "Tests must pass before commit. Please fix and commit again." red

    exit 1 # Fail commit on non-zero exit code
fi

# Don't allow commits with debug statements
check_for_debug() {
    cecho "Checking for debug statements . . ." yellow
    declare -a statements=("console.log" "debugger" "print\(" "import pdb")

    for statement in "${array[@]}"
    do
        output=$(git diff --cached | grep $statement)
        echo Checking for $statement, test output: $output

        if [[ -z $output ]]; then
            cecho "Your staged changes contain debug or print statements, please remove them and commit again." red
            exit 1
        fi
    done
}

echo -e "\n"
exit 0
